"""autogenerated by genmsg_py from head_ctrlRequest.msg. Do not edit."""
import roslib.message
import struct


class head_ctrlRequest(roslib.message.Message):
  _md5sum = "522f8591c845ace5ac8c5c5852170802"
  _type = "rovio_shared/head_ctrlRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int8 HEAD_UP=11
int8 HEAD_DOWN=12
int8 HEAD_MIDDLE=13

int8 head_pos

"""
  # Pseudo-constants
  HEAD_UP = 11
  HEAD_DOWN = 12
  HEAD_MIDDLE = 13

  __slots__ = ['head_pos']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       head_pos
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(head_ctrlRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head_pos is None:
        self.head_pos = 0
    else:
      self.head_pos = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.head_pos))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.head_pos,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.head_pos))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.head_pos,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
"""autogenerated by genmsg_py from head_ctrlResponse.msg. Do not edit."""
import roslib.message
import struct


class head_ctrlResponse(roslib.message.Message):
  _md5sum = "208ac5fdc497ef2f1bd168d28a2b5e05"
  _type = "rovio_shared/head_ctrlResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int8 SUCCESS=0
int8 FAILURE=1
int8 ROBOT_BUSY=2
int8 FEATURE_NOT_IMPLEMENTED=3
int8 UNKNOWN_CGI_ACTION=4
int8 NO_NS_SIGNAL=5
int8 NO_EMPTY_PATH_AVAILABLE=6
int8 FAILED_TO_READ_PATH=7
int8 PATH_BASEADDRESS_NOT_INITIALIZED=8
int8 PATH_NOT_FOUND=9
int8 PATH_NAME_NOT_SPECIFIED=10
int8 NOT_RECORDING_PATH=11
int8 FLASH_NOT_INITIALIZED=12
int8 FAILED_TO_DELETE_PATH=13
int8 FAILED_TO_READ_FROM_FLASH=14
int8 FAILED_TO_WRITE_TO_FLASH=15
int8 FLASH_NOT_READY=16
int8 NO_MEMORY_AVAILABLE=17
int8 NO_MCU_PORT_AVAILABLE=18
int8 NO_NS_PORT_AVAILABLE=19
int8 NS_PACKET_CHECKSUM_ERROR=20
int8 NS_UART_READ_ERROR=21
int8 PARAMETER_OUTOFRANGE=22
int8 NO_PARAMETER=23

int8 response

"""
  # Pseudo-constants
  SUCCESS = 0
  FAILURE = 1
  ROBOT_BUSY = 2
  FEATURE_NOT_IMPLEMENTED = 3
  UNKNOWN_CGI_ACTION = 4
  NO_NS_SIGNAL = 5
  NO_EMPTY_PATH_AVAILABLE = 6
  FAILED_TO_READ_PATH = 7
  PATH_BASEADDRESS_NOT_INITIALIZED = 8
  PATH_NOT_FOUND = 9
  PATH_NAME_NOT_SPECIFIED = 10
  NOT_RECORDING_PATH = 11
  FLASH_NOT_INITIALIZED = 12
  FAILED_TO_DELETE_PATH = 13
  FAILED_TO_READ_FROM_FLASH = 14
  FAILED_TO_WRITE_TO_FLASH = 15
  FLASH_NOT_READY = 16
  NO_MEMORY_AVAILABLE = 17
  NO_MCU_PORT_AVAILABLE = 18
  NO_NS_PORT_AVAILABLE = 19
  NS_PACKET_CHECKSUM_ERROR = 20
  NS_UART_READ_ERROR = 21
  PARAMETER_OUTOFRANGE = 22
  NO_PARAMETER = 23

  __slots__ = ['response']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       response
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(head_ctrlResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
    else:
      self.response = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.response,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.response,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
class head_ctrl(roslib.message.ServiceDefinition):
  _type          = 'rovio_shared/head_ctrl'
  _md5sum = '8fc91ecf3dc7f4ab832a70ed14ec95b7'
  _request_class  = head_ctrlRequest
  _response_class = head_ctrlResponse
