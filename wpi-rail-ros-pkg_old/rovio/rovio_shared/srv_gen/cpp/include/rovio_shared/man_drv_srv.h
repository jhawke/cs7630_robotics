/* Auto-generated by genmsg_cpp for file /home/dev/cs7630_robotics/wpi-rail-ros-pkg_old/rovio/rovio_shared/srv/man_drv_srv.srv */
#ifndef ROVIO_SHARED_SERVICE_MAN_DRV_SRV_H
#define ROVIO_SHARED_SERVICE_MAN_DRV_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rovio_shared
{
template <class ContainerAllocator>
struct man_drv_srvRequest_ {
  typedef man_drv_srvRequest_<ContainerAllocator> Type;

  man_drv_srvRequest_()
  : drive(0)
  , speed(0)
  {
  }

  man_drv_srvRequest_(const ContainerAllocator& _alloc)
  : drive(0)
  , speed(0)
  {
  }

  typedef int8_t _drive_type;
  int8_t drive;

  typedef int8_t _speed_type;
  int8_t speed;

  enum { STOP = 0 };
  enum { FORWARD = 1 };
  enum { BACKWARD = 2 };
  enum { STRAIGHT_LEFT = 3 };
  enum { STRAIGHT_RIGHT = 4 };
  enum { ROTATE_LEFT = 5 };
  enum { ROTATE_RIGHT = 6 };
  enum { DIAGONAL_FORWARD_LEFT = 7 };
  enum { DIAGONAL_FORWARD_RIGHT = 8 };
  enum { DIAGONAL_BACKWARD_LEFT = 9 };
  enum { DIAGONAL_BACKWARD_RIGHT = 10 };
  enum { HEAD_UP = 11 };
  enum { HEAD_DOWN = 12 };
  enum { HEAD_MIDDLE = 13 };
  enum { ROTATE_LEFT_20_DEG = 17 };
  enum { ROTATE_RIGHT_20_DEG = 18 };
  enum { MIN_DRIVE_VAL = 0 };
  enum { MAX_DRIVE_VAL = 18 };
  enum { FASTEST = 1 };
  enum { SLOWEST = 10 };
  enum { MIN_SPEED_VAL = 1 };
  enum { MAX_SPEED_VAL = 10 };

private:
  static const char* __s_getDataType_() { return "rovio_shared/man_drv_srvRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "14675853bd9417686a1390c3fb2eaae6"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "14675853bd9417686a1390c3fb2eaae6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
int8 STOP=0\n\
int8 FORWARD=1\n\
int8 BACKWARD=2\n\
int8 STRAIGHT_LEFT=3\n\
int8 STRAIGHT_RIGHT=4\n\
int8 ROTATE_LEFT=5\n\
int8 ROTATE_RIGHT=6\n\
int8 DIAGONAL_FORWARD_LEFT=7\n\
int8 DIAGONAL_FORWARD_RIGHT=8\n\
int8 DIAGONAL_BACKWARD_LEFT=9\n\
int8 DIAGONAL_BACKWARD_RIGHT=10\n\
int8 HEAD_UP=11\n\
int8 HEAD_DOWN=12\n\
int8 HEAD_MIDDLE=13\n\
\n\
int8 ROTATE_LEFT_20_DEG=17\n\
int8 ROTATE_RIGHT_20_DEG=18\n\
int8 MIN_DRIVE_VAL=0\n\
int8 MAX_DRIVE_VAL=18\n\
\n\
\n\
int8 FASTEST=1\n\
int8 SLOWEST=10\n\
int8 MIN_SPEED_VAL=1\n\
int8 MAX_SPEED_VAL=10\n\
\n\
\n\
int8 drive\n\
int8 speed\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, drive);
    ros::serialization::serialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, drive);
    ros::serialization::deserialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(drive);
    size += ros::serialization::serializationLength(speed);
    return size;
  }

  typedef boost::shared_ptr< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct man_drv_srvRequest
typedef  ::rovio_shared::man_drv_srvRequest_<std::allocator<void> > man_drv_srvRequest;

typedef boost::shared_ptr< ::rovio_shared::man_drv_srvRequest> man_drv_srvRequestPtr;
typedef boost::shared_ptr< ::rovio_shared::man_drv_srvRequest const> man_drv_srvRequestConstPtr;


template <class ContainerAllocator>
struct man_drv_srvResponse_ {
  typedef man_drv_srvResponse_<ContainerAllocator> Type;

  man_drv_srvResponse_()
  {
  }

  man_drv_srvResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "rovio_shared/man_drv_srvResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "14675853bd9417686a1390c3fb2eaae6"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct man_drv_srvResponse
typedef  ::rovio_shared::man_drv_srvResponse_<std::allocator<void> > man_drv_srvResponse;

typedef boost::shared_ptr< ::rovio_shared::man_drv_srvResponse> man_drv_srvResponsePtr;
typedef boost::shared_ptr< ::rovio_shared::man_drv_srvResponse const> man_drv_srvResponseConstPtr;

struct man_drv_srv
{

typedef man_drv_srvRequest Request;
typedef man_drv_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct man_drv_srv
} // namespace rovio_shared

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14675853bd9417686a1390c3fb2eaae6";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14675853bd941768ULL;
  static const uint64_t static_value2 = 0x6a1390c3fb2eaae6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/man_drv_srvRequest";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int8 STOP=0\n\
int8 FORWARD=1\n\
int8 BACKWARD=2\n\
int8 STRAIGHT_LEFT=3\n\
int8 STRAIGHT_RIGHT=4\n\
int8 ROTATE_LEFT=5\n\
int8 ROTATE_RIGHT=6\n\
int8 DIAGONAL_FORWARD_LEFT=7\n\
int8 DIAGONAL_FORWARD_RIGHT=8\n\
int8 DIAGONAL_BACKWARD_LEFT=9\n\
int8 DIAGONAL_BACKWARD_RIGHT=10\n\
int8 HEAD_UP=11\n\
int8 HEAD_DOWN=12\n\
int8 HEAD_MIDDLE=13\n\
\n\
int8 ROTATE_LEFT_20_DEG=17\n\
int8 ROTATE_RIGHT_20_DEG=18\n\
int8 MIN_DRIVE_VAL=0\n\
int8 MAX_DRIVE_VAL=18\n\
\n\
\n\
int8 FASTEST=1\n\
int8 SLOWEST=10\n\
int8 MIN_SPEED_VAL=1\n\
int8 MAX_SPEED_VAL=10\n\
\n\
\n\
int8 drive\n\
int8 speed\n\
\n\
";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/man_drv_srvResponse";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rovio_shared::man_drv_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.drive);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct man_drv_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rovio_shared::man_drv_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct man_drv_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rovio_shared::man_drv_srv> {
  static const char* value() 
  {
    return "14675853bd9417686a1390c3fb2eaae6";
  }

  static const char* value(const rovio_shared::man_drv_srv&) { return value(); } 
};

template<>
struct DataType<rovio_shared::man_drv_srv> {
  static const char* value() 
  {
    return "rovio_shared/man_drv_srv";
  }

  static const char* value(const rovio_shared::man_drv_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rovio_shared::man_drv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14675853bd9417686a1390c3fb2eaae6";
  }

  static const char* value(const rovio_shared::man_drv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rovio_shared::man_drv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/man_drv_srv";
  }

  static const char* value(const rovio_shared::man_drv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rovio_shared::man_drv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14675853bd9417686a1390c3fb2eaae6";
  }

  static const char* value(const rovio_shared::man_drv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rovio_shared::man_drv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/man_drv_srv";
  }

  static const char* value(const rovio_shared::man_drv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROVIO_SHARED_SERVICE_MAN_DRV_SRV_H

