/* Auto-generated by genmsg_cpp for file /home/dev/cs7630_robotics/wpi-rail-ros-pkg_old/rovio/rovio_shared/srv/twist_srv.srv */
#ifndef ROVIO_SHARED_SERVICE_TWIST_SRV_H
#define ROVIO_SHARED_SERVICE_TWIST_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"



namespace rovio_shared
{
template <class ContainerAllocator>
struct twist_srvRequest_ {
  typedef twist_srvRequest_<ContainerAllocator> Type;

  twist_srvRequest_()
  : linear()
  , angular()
  {
  }

  twist_srvRequest_(const ContainerAllocator& _alloc)
  : linear(_alloc)
  , angular(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  linear;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  angular;


private:
  static const char* __s_getDataType_() { return "rovio_shared/twist_srvRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9f195f881246fdfa2798d1d3eebca84a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "9f195f881246fdfa2798d1d3eebca84a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Vector3  linear\n\
geometry_msgs/Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, linear);
    ros::serialization::serialize(stream, angular);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, linear);
    ros::serialization::deserialize(stream, angular);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(linear);
    size += ros::serialization::serializationLength(angular);
    return size;
  }

  typedef boost::shared_ptr< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::twist_srvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct twist_srvRequest
typedef  ::rovio_shared::twist_srvRequest_<std::allocator<void> > twist_srvRequest;

typedef boost::shared_ptr< ::rovio_shared::twist_srvRequest> twist_srvRequestPtr;
typedef boost::shared_ptr< ::rovio_shared::twist_srvRequest const> twist_srvRequestConstPtr;


template <class ContainerAllocator>
struct twist_srvResponse_ {
  typedef twist_srvResponse_<ContainerAllocator> Type;

  twist_srvResponse_()
  {
  }

  twist_srvResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "rovio_shared/twist_srvResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "9f195f881246fdfa2798d1d3eebca84a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::twist_srvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct twist_srvResponse
typedef  ::rovio_shared::twist_srvResponse_<std::allocator<void> > twist_srvResponse;

typedef boost::shared_ptr< ::rovio_shared::twist_srvResponse> twist_srvResponsePtr;
typedef boost::shared_ptr< ::rovio_shared::twist_srvResponse const> twist_srvResponseConstPtr;

struct twist_srv
{

typedef twist_srvRequest Request;
typedef twist_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct twist_srv
} // namespace rovio_shared

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::twist_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const  ::rovio_shared::twist_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9f195f881246fdfaULL;
  static const uint64_t static_value2 = 0x2798d1d3eebca84aULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/twist_srvRequest";
  }

  static const char* value(const  ::rovio_shared::twist_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3  linear\n\
geometry_msgs/Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::rovio_shared::twist_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rovio_shared::twist_srvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rovio_shared::twist_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rovio_shared::twist_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/twist_srvResponse";
  }

  static const char* value(const  ::rovio_shared::twist_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rovio_shared::twist_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rovio_shared::twist_srvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rovio_shared::twist_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear);
    stream.next(m.angular);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct twist_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rovio_shared::twist_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct twist_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rovio_shared::twist_srv> {
  static const char* value() 
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const rovio_shared::twist_srv&) { return value(); } 
};

template<>
struct DataType<rovio_shared::twist_srv> {
  static const char* value() 
  {
    return "rovio_shared/twist_srv";
  }

  static const char* value(const rovio_shared::twist_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rovio_shared::twist_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const rovio_shared::twist_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rovio_shared::twist_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/twist_srv";
  }

  static const char* value(const rovio_shared::twist_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rovio_shared::twist_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const rovio_shared::twist_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rovio_shared::twist_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rovio_shared/twist_srv";
  }

  static const char* value(const rovio_shared::twist_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROVIO_SHARED_SERVICE_TWIST_SRV_H

