/*!
 * \file rovio_move.cpp
 * \brief Communication node to the Rovio's motors.
 *
 * The rovio_head creates a ROS node that allows messages to control the motors of the Rovio.
 * The motors can be controlled by providing either a rovio_shared/man_drv message (relating to motor commands defined by the Rovio's API) or geometry_msgs/Twist messages.
 *
 * \author Russell Toris, WPI - rctoris@wpi.edu
 * \date November 22, 2011
 */
#include <algorithm>
#include <geometry_msgs/Twist.h>
#include <math.h>
#include <ros/ros.h>
#include <rovio_shared/man_drv.h>
#include <rovio_shared/rovio_http.h>
#include <rovio_shared/rovio_position.h>
#include <rovio_ctrl/rovio_move.h>
#include <rovio_shared/twist_srv.h>
#include <rovio_shared/man_drv_srv.h>
#include <sstream>
#include <string>

#define MIN_TURN_COMMAND 6

#define NUM_MSG 1
#define PI 3.14159265
#define SIG_THRESH 6000
using namespace std;

move_controller::move_controller()
{
  string user;
  string pass;

  // check for all the correct parameters
  if (!node.getParam(USER, user))
  {
    ROS_ERROR("Parameter %s not found.", USER);
    exit(-1);
  }
  if (!node.getParam(PASS, pass))
  {
    ROS_ERROR("Parameter %s not found.", PASS);
    exit(-1);
  }
  if (!node.getParam(HOST, host))
  {
    ROS_ERROR("Parameter %s not found.", HOST);
    exit(-1);
  }

  // create the communication object to talk to Rovio
  rovio = new rovio_http(user, pass);

  // add subscriptions that will control the Rovio
  //man_drv = node.subscribe<rovio_shared::man_drv> ("man_drv", 10, &move_controller::man_drv_callback, this);
  //cmd_vel = node.subscribe<geometry_msgs::Twist> ("cmd_vel", 10, &move_controller::cmd_vel_callback, this);
 
  //Add service to tell where the Rovio is
  robot_position = node.advertiseService("rovio_position",&move_controller::get_position_callback,this);
  
  //Add service to allow mcom to control rovio
  motor_request = node.advertiseService("rovio_move_srv",&move_controller::motor_drive_callback,this);
  man_driver = node.advertiseService("rovio_man_drv",&move_controller::manual_callback,this);
  
  drive = 0;
  speed = 0;
  rotate = 0;

  ROS_INFO("Rovio Move Controller Initialized");
}

move_controller::~move_controller()
{
  // free up the rovio_http object
  delete rovio;
}



void move_controller::update()
{
      ROS_INFO("Drive is %d, speed is %d",drive,speed);
  // check for a rotation command
  if (rotate > 0)
  {
    rotate = 10-rotate;
    if(rotate<1){rotate=1;}
    if(rotate>MIN_TURN_COMMAND){rotate=MIN_TURN_COMMAND;}
    ROS_DEBUG("Rotate: %d",rotate);
    // build the URL command and send it
    stringstream ss;
    ss << "http://" << host.c_str() << "/rev.cgi?Cmd=nav&action=18&drive=6&speed=" << rotate;
    rovio_response *buf = rovio->send(ss.str().c_str());
    rovio_response_clean(buf);
  }
  else if (rotate < 0)
  {
    rotate = 10+rotate;
    if(rotate<1){rotate=1;}
    if(rotate>MIN_TURN_COMMAND){rotate=MIN_TURN_COMMAND;}
    ROS_DEBUG("Rotate: [neg-sense] %d",rotate);
    // build the URL command and send it
    stringstream ss;
    ss << "http://" << host.c_str() << "/rev.cgi?Cmd=nav&action=18&drive=5&speed=" << rotate;
    rovio_response *buf = rovio->send(ss.str().c_str());
    rovio_response_clean(buf);
  }
    // check for a drive command
  if (drive > 0)
  {
    speed = 1;
    ROS_INFO("Drive is %d, speed is %d",drive,speed);
    // build the URL command and send it
    stringstream ss;
    ss << "http://" << host.c_str() << "/rev.cgi?Cmd=nav&action=18&drive=" << drive << "&speed=" << speed;
    rovio_response *buf = rovio->send(ss.str().c_str());
    rovio_response_clean(buf);
  }
}

bool move_controller::motor_drive_callback(rovio_shared::twist_srv::Request	&req,
					   rovio_shared::twist_srv::Response	&res)
{
    ROS_DEBUG("Drive command recieved.");
 
 // check if we are moving left or right
  if (req.linear.x == 0 && req.linear.y < 0)
  {
    // drive left
    drive = 3;
  }
  else if (req.linear.x == 0 && req.linear.y > 0)
  {
    // drive right
    drive = 4;
  }
  else
  {
    // calculate the angle
    double angle = atan2(req.linear.x, req.linear.y);
    // bound the movements to one of the discrete Rovio drive commands
    if (req.linear.x > 0 && angle <= 5 * M_PI / 8 && angle >= 3 * M_PI / 8)
    {
      // drive forwards
      drive = 1;
    }
    else if (req.linear.x > 0 && req.linear.y > 0 && angle < 3 * M_PI / 8 && angle >= M_PI / 8)
    {
      // drive forwards and right
      drive = 8;
    }
    else if (req.linear.y > 0 && (angle >= -1 * M_PI / 8 || angle >= 3 * M_PI / 8))
    {
      // drive right
      drive = 4;
    }
    else if (req.linear.x < 0 && req.linear.y > 0 && angle < -1 * M_PI / 8 && angle >= -3 * M_PI / 8)
    {
      // drive backwards and right
      drive = 10;
    }
    else if (req.linear.x < 0 && angle <= -3 * M_PI / 8 && angle >= -5 * M_PI / 8)
    {
      // drive backwards
      drive = 2;
    }
    else if (req.linear.x < 0 && req.linear.y < 0 && angle <= -5 * M_PI / 8 && angle >= -7 * M_PI / 8)
    {
      // drive backwards and left
      drive = 9;
    }
    else if (req.linear.y < 0 && (angle < -7 * M_PI / 8 || angle >= 7 * M_PI / 8))
    {
      // drive left
      drive = 3;
    }
    else if (req.linear.x > 0 && req.linear.y < 0 && angle < 7 * M_PI / 8 && angle >= 5 * M_PI / 8)
    {
      // drive forwards and left
      drive = 7;
    }
    else
    {
      // no movement
      drive = 0;
    }
  }

  // get the rotational speed
  rotate = (req.angular.z * 10.0);
  // get the linear speed (10 being the fastest)
  speed = 10-((int)(sqrt(pow(req.linear.x, 2.0) + pow(req.linear.y, 2.0)) * 10));
  if(speed>10){speed=10;}
  if(speed<10){speed=1;}
  ROS_DEBUG("D/S: %d,%d",drive,speed);
  
    move_controller::update();
    
    return true;
}

bool move_controller::get_position_callback(rovio_shared::rovio_position::Request  &req,
					    rovio_shared::rovio_position::Response &res )
{
    ROS_DEBUG("Position request recieved.");
    //We need to average this over a bunch of points to get non-noisy numbers.
    int16_t x_resp = -1;
    int16_t y_resp = -1;
    float   theta_resp  =  0;
    float   theta_temp = 0;
    int32_t x_sum=0;
    int32_t y_sum=0;
    uint32_t sig_str = 0;
    int32_t sig_ok = 0;
    float theta_sum=0;
    rovio_response *buf;
    // build the URL command and send it
    for(int i = 0;i<NUM_MSG;i++)
    {
      stringstream ss;
      ss << "http://" << host.c_str() << "/rev.cgi?Cmd=nav&action=1";
      buf = rovio->send(ss.str().c_str());
      // parse out the response
      sscanf(strstr(buf->data, "x="), "x=%i", &x_resp);
      sscanf(strstr(buf->data, "y="), "y=%i", &y_resp);
      sscanf(strstr(buf->data, "theta="), "theta=%f", &theta_resp);
      sscanf(strstr(buf->data, "ss="), "ss=%u", &sig_str);
      theta_temp = (theta_resp-PI/2.0);
      x_sum+=x_resp;
      y_sum+=y_resp;
      theta_sum+=theta_resp;
      sig_str+=sig_str;
    }
    x_resp = x_sum/NUM_MSG;
    y_resp = y_sum/NUM_MSG;
    theta_resp = theta_sum/NUM_MSG;
    if((sig_str/NUM_MSG)>SIG_THRESH)
    {
      sig_ok = 1;
    }
    //This is where I'd put error checking... IF I CHECKED ERRORS.
    //Fill the service response
    res.x = x_resp;
    res.y = y_resp;
    res.theta = theta_resp;
    res.is_valid = sig_ok;
    ROS_DEBUG("Position request response: x,y,th = [%d],[%d], [%f] with ss %u (is_valid = %d)", res.x,res.y,res.theta,sig_str,res.is_valid);
    //Clean up.
    rovio_response_clean(buf); 
    return true;
}

void move_controller::man_drv_callback(const rovio_shared::man_drv::ConstPtr &msg)
{
  // check to see if all the requests are valid
  if (msg->drive < rovio_shared::man_drv::MIN_DRIVE_VAL || msg->drive > rovio_shared::man_drv::MAX_DRIVE_VAL)
  {
    ROS_ERROR("Manual Drive 'drive' value of %i out of range [%i,%i].", msg->drive, rovio_shared::man_drv::MIN_DRIVE_VAL, rovio_shared::man_drv::MAX_DRIVE_VAL);
    return;
  }
  if (msg->speed < rovio_shared::man_drv::MIN_SPEED_VAL || msg->speed > rovio_shared::man_drv::MAX_SPEED_VAL)
  {
    ROS_ERROR("Manual Drive 'speed' value of %i out of range [%i,%i].", msg->speed, rovio_shared::man_drv::MIN_SPEED_VAL, rovio_shared::man_drv::MAX_SPEED_VAL);
    return;
  }

  // set the values
  drive = msg->drive;
  speed = msg->speed;
}

bool move_controller::manual_callback(rovio_shared::man_drv_srv::Request &req, rovio_shared::man_drv_srv::Response &res)
{
  if (req.drive < rovio_shared::man_drv::MIN_DRIVE_VAL || req.drive > rovio_shared::man_drv::MAX_DRIVE_VAL)
  {
    ROS_ERROR("Manual Drive 'drive' value of %i out of range [%i,%i].", req.drive, rovio_shared::man_drv::MIN_DRIVE_VAL, rovio_shared::man_drv::MAX_DRIVE_VAL);
    return false;
  }
  if (req.speed < rovio_shared::man_drv::MIN_SPEED_VAL || req.speed > rovio_shared::man_drv::MAX_SPEED_VAL)
  {
    ROS_ERROR("Manual Drive 'speed' value of %i out of range [%i,%i].", req.speed, rovio_shared::man_drv::MIN_SPEED_VAL, rovio_shared::man_drv::MAX_SPEED_VAL);
    return false;
  }

  // set the values
  drive = req.drive;
  speed = req.speed;
  ROS_DEBUG("D/S: %d,%d",drive,speed);
  
    move_controller::update();
  
 return true; 
}

void move_controller::cmd_vel_callback(const geometry_msgs::Twist::ConstPtr &msg)
{
  // check if we are moving left or right
  if (msg->linear.x == 0 && msg->linear.y < 0)
  {
    // drive left
    drive = 3;
  }
  else if (msg->linear.x == 0 && msg->linear.y > 0)
  {
    // drive right
    drive = 4;
  }
  else
  {
    // calculate the angle
    double angle = atan2(msg->linear.x, msg->linear.y);
    // bound the movements to one of the discrete Rovio drive commands
    if (msg->linear.x > 0 && angle <= 5 * M_PI / 8 && angle >= 3 * M_PI / 8)
    {
      // drive forwards
      drive = 1;
    }
    else if (msg->linear.x > 0 && msg->linear.y > 0 && angle < 3 * M_PI / 8 && angle >= M_PI / 8)
    {
      // drive forwards and right
      drive = 8;
    }
    else if (msg->linear.y > 0 && (angle >= -1 * M_PI / 8 || angle >= 3 * M_PI / 8))
    {
      // drive right
      drive = 4;
    }
    else if (msg->linear.x < 0 && msg->linear.y > 0 && angle < -1 * M_PI / 8 && angle >= -3 * M_PI / 8)
    {
      // drive backwards and right
      drive = 10;
    }
    else if (msg->linear.x < 0 && angle <= -3 * M_PI / 8 && angle >= -5 * M_PI / 8)
    {
      // drive backwards
      drive = 2;
    }
    else if (msg->linear.x < 0 && msg->linear.y < 0 && angle <= -5 * M_PI / 8 && angle >= -7 * M_PI / 8)
    {
      // drive backwards and left
      drive = 9;
    }
    else if (msg->linear.y < 0 && (angle < -7 * M_PI / 8 || angle >= 7 * M_PI / 8))
    {
      // drive left
      drive = 3;
    }
    else if (msg->linear.x > 0 && msg->linear.y < 0 && angle < 7 * M_PI / 8 && angle >= 5 * M_PI / 8)
    {
      // drive forwards and left
      drive = 7;
    }
    else
    {
      // no movement
      drive = 0;
    }
  }

  // get the rotational speed
  rotate = msg->angular.z * 10.0;

  // get the linear speed (10 being the fastest)
  speed = min(10, (int)(sqrt(pow(msg->linear.x, 2.0) + pow(msg->linear.y, 2.0)) * 10));
}

int main(int argc, char **argv)
{
  // initialize ROS and the node
  ros::init(argc, argv, "rovio_move");

  // initialize the Rovio controller
  move_controller controller;

  // update at 5 Hz
  ros::Rate loop_rate(5);
  // continue until a ctrl-c has occurred
  while (ros::ok())
  {
    ros::spinOnce();
    // update the motors
    //controller.update();
    loop_rate.sleep();
  }
}
