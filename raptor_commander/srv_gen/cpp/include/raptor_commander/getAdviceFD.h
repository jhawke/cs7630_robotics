/* Auto-generated by genmsg_cpp for file /home/jdh/cs7630_robotics/raptor_commander/srv/getAdviceFD.srv */
#ifndef RAPTOR_COMMANDER_SERVICE_GETADVICEFD_H
#define RAPTOR_COMMANDER_SERVICE_GETADVICEFD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace raptor_commander
{
template <class ContainerAllocator>
struct getAdviceFDRequest_ {
  typedef getAdviceFDRequest_<ContainerAllocator> Type;

  getAdviceFDRequest_()
  {
  }

  getAdviceFDRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "raptor_commander/getAdviceFDRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "cbb8896b89024e908c0848bc425c6cca"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getAdviceFDRequest
typedef  ::raptor_commander::getAdviceFDRequest_<std::allocator<void> > getAdviceFDRequest;

typedef boost::shared_ptr< ::raptor_commander::getAdviceFDRequest> getAdviceFDRequestPtr;
typedef boost::shared_ptr< ::raptor_commander::getAdviceFDRequest const> getAdviceFDRequestConstPtr;


template <class ContainerAllocator>
struct getAdviceFDResponse_ {
  typedef getAdviceFDResponse_<ContainerAllocator> Type;

  getAdviceFDResponse_()
  : newThreshold(0)
  , x(0)
  , y(0)
  , bestDark(0)
  {
  }

  getAdviceFDResponse_(const ContainerAllocator& _alloc)
  : newThreshold(0)
  , x(0)
  , y(0)
  , bestDark(0)
  {
  }

  typedef int32_t _newThreshold_type;
  int32_t newThreshold;

  typedef int32_t _x_type;
  int32_t x;

  typedef int32_t _y_type;
  int32_t y;

  typedef int32_t _bestDark_type;
  int32_t bestDark;


private:
  static const char* __s_getDataType_() { return "raptor_commander/getAdviceFDResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cbb8896b89024e908c0848bc425c6cca"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "cbb8896b89024e908c0848bc425c6cca"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 newThreshold\n\
int32 x\n\
int32 y\n\
int32 bestDark\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, newThreshold);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, bestDark);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, newThreshold);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, bestDark);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(newThreshold);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(bestDark);
    return size;
  }

  typedef boost::shared_ptr< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getAdviceFDResponse
typedef  ::raptor_commander::getAdviceFDResponse_<std::allocator<void> > getAdviceFDResponse;

typedef boost::shared_ptr< ::raptor_commander::getAdviceFDResponse> getAdviceFDResponsePtr;
typedef boost::shared_ptr< ::raptor_commander::getAdviceFDResponse const> getAdviceFDResponseConstPtr;

struct getAdviceFD
{

typedef getAdviceFDRequest Request;
typedef getAdviceFDResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct getAdviceFD
} // namespace raptor_commander

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFDRequest";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbb8896b89024e908c0848bc425c6cca";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcbb8896b89024e90ULL;
  static const uint64_t static_value2 = 0x8c0848bc425c6ccaULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFDResponse";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 newThreshold\n\
int32 x\n\
int32 y\n\
int32 bestDark\n\
\n\
\n\
";
  }

  static const char* value(const  ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor_commander::getAdviceFDRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getAdviceFDRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor_commander::getAdviceFDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.newThreshold);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.bestDark);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getAdviceFDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<raptor_commander::getAdviceFD> {
  static const char* value() 
  {
    return "cbb8896b89024e908c0848bc425c6cca";
  }

  static const char* value(const raptor_commander::getAdviceFD&) { return value(); } 
};

template<>
struct DataType<raptor_commander::getAdviceFD> {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFD";
  }

  static const char* value(const raptor_commander::getAdviceFD&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor_commander::getAdviceFDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbb8896b89024e908c0848bc425c6cca";
  }

  static const char* value(const raptor_commander::getAdviceFDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor_commander::getAdviceFDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFD";
  }

  static const char* value(const raptor_commander::getAdviceFDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor_commander::getAdviceFDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbb8896b89024e908c0848bc425c6cca";
  }

  static const char* value(const raptor_commander::getAdviceFDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor_commander::getAdviceFDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFD";
  }

  static const char* value(const raptor_commander::getAdviceFDResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RAPTOR_COMMANDER_SERVICE_GETADVICEFD_H

