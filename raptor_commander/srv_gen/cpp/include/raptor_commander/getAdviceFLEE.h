/* Auto-generated by genmsg_cpp for file /home/jdh/cs7630_robotics/raptor_commander/srv/getAdviceFLEE.srv */
#ifndef RAPTOR_COMMANDER_SERVICE_GETADVICEFLEE_H
#define RAPTOR_COMMANDER_SERVICE_GETADVICEFLEE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace raptor_commander
{
template <class ContainerAllocator>
struct getAdviceFLEERequest_ {
  typedef getAdviceFLEERequest_<ContainerAllocator> Type;

  getAdviceFLEERequest_()
  {
  }

  getAdviceFLEERequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "raptor_commander/getAdviceFLEERequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3564d8cb07efc73a81845dd1f9b6a7af"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getAdviceFLEERequest
typedef  ::raptor_commander::getAdviceFLEERequest_<std::allocator<void> > getAdviceFLEERequest;

typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEERequest> getAdviceFLEERequestPtr;
typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEERequest const> getAdviceFLEERequestConstPtr;


template <class ContainerAllocator>
struct getAdviceFLEEResponse_ {
  typedef getAdviceFLEEResponse_<ContainerAllocator> Type;

  getAdviceFLEEResponse_()
  : approachSpeed(0)
  {
  }

  getAdviceFLEEResponse_(const ContainerAllocator& _alloc)
  : approachSpeed(0)
  {
  }

  typedef int32_t _approachSpeed_type;
  int32_t approachSpeed;


private:
  static const char* __s_getDataType_() { return "raptor_commander/getAdviceFLEEResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3564d8cb07efc73a81845dd1f9b6a7af"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3564d8cb07efc73a81845dd1f9b6a7af"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 approachSpeed\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, approachSpeed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, approachSpeed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(approachSpeed);
    return size;
  }

  typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getAdviceFLEEResponse
typedef  ::raptor_commander::getAdviceFLEEResponse_<std::allocator<void> > getAdviceFLEEResponse;

typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEEResponse> getAdviceFLEEResponsePtr;
typedef boost::shared_ptr< ::raptor_commander::getAdviceFLEEResponse const> getAdviceFLEEResponseConstPtr;

struct getAdviceFLEE
{

typedef getAdviceFLEERequest Request;
typedef getAdviceFLEEResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct getAdviceFLEE
} // namespace raptor_commander

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFLEERequest";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3564d8cb07efc73a81845dd1f9b6a7af";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3564d8cb07efc73aULL;
  static const uint64_t static_value2 = 0x81845dd1f9b6a7afULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFLEEResponse";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 approachSpeed\n\
\n\
\n\
";
  }

  static const char* value(const  ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor_commander::getAdviceFLEERequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getAdviceFLEERequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.approachSpeed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getAdviceFLEEResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<raptor_commander::getAdviceFLEE> {
  static const char* value() 
  {
    return "3564d8cb07efc73a81845dd1f9b6a7af";
  }

  static const char* value(const raptor_commander::getAdviceFLEE&) { return value(); } 
};

template<>
struct DataType<raptor_commander::getAdviceFLEE> {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFLEE";
  }

  static const char* value(const raptor_commander::getAdviceFLEE&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3564d8cb07efc73a81845dd1f9b6a7af";
  }

  static const char* value(const raptor_commander::getAdviceFLEERequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor_commander::getAdviceFLEERequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFLEE";
  }

  static const char* value(const raptor_commander::getAdviceFLEERequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3564d8cb07efc73a81845dd1f9b6a7af";
  }

  static const char* value(const raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor_commander/getAdviceFLEE";
  }

  static const char* value(const raptor_commander::getAdviceFLEEResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RAPTOR_COMMANDER_SERVICE_GETADVICEFLEE_H

