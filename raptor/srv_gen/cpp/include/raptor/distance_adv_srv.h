/* Auto-generated by genmsg_cpp for file /home/dev/cs7630_robotics/raptor/srv/distance_adv_srv.srv */
#ifndef RAPTOR_SERVICE_DISTANCE_ADV_SRV_H
#define RAPTOR_SERVICE_DISTANCE_ADV_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace raptor
{
template <class ContainerAllocator>
struct distance_adv_srvRequest_ {
  typedef distance_adv_srvRequest_<ContainerAllocator> Type;

  distance_adv_srvRequest_()
  {
  }

  distance_adv_srvRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "raptor/distance_adv_srvRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d8c624346e7957f0fb7d529b8a231ec2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor::distance_adv_srvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct distance_adv_srvRequest
typedef  ::raptor::distance_adv_srvRequest_<std::allocator<void> > distance_adv_srvRequest;

typedef boost::shared_ptr< ::raptor::distance_adv_srvRequest> distance_adv_srvRequestPtr;
typedef boost::shared_ptr< ::raptor::distance_adv_srvRequest const> distance_adv_srvRequestConstPtr;


template <class ContainerAllocator>
struct distance_adv_srvResponse_ {
  typedef distance_adv_srvResponse_<ContainerAllocator> Type;

  distance_adv_srvResponse_()
  : distance(0)
  {
  }

  distance_adv_srvResponse_(const ContainerAllocator& _alloc)
  : distance(0)
  {
  }

  typedef int16_t _distance_type;
  int16_t distance;


private:
  static const char* __s_getDataType_() { return "raptor/distance_adv_srvResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d8c624346e7957f0fb7d529b8a231ec2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "d8c624346e7957f0fb7d529b8a231ec2"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 distance\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, distance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, distance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(distance);
    return size;
  }

  typedef boost::shared_ptr< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptor::distance_adv_srvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct distance_adv_srvResponse
typedef  ::raptor::distance_adv_srvResponse_<std::allocator<void> > distance_adv_srvResponse;

typedef boost::shared_ptr< ::raptor::distance_adv_srvResponse> distance_adv_srvResponsePtr;
typedef boost::shared_ptr< ::raptor::distance_adv_srvResponse const> distance_adv_srvResponseConstPtr;

struct distance_adv_srv
{

typedef distance_adv_srvRequest Request;
typedef distance_adv_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct distance_adv_srv
} // namespace raptor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor::distance_adv_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::raptor::distance_adv_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor/distance_adv_srvRequest";
  }

  static const char* value(const  ::raptor::distance_adv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::raptor::distance_adv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor::distance_adv_srvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::raptor::distance_adv_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8c624346e7957f0fb7d529b8a231ec2";
  }

  static const char* value(const  ::raptor::distance_adv_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8c624346e7957f0ULL;
  static const uint64_t static_value2 = 0xfb7d529b8a231ec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor/distance_adv_srvResponse";
  }

  static const char* value(const  ::raptor::distance_adv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 distance\n\
\n\
";
  }

  static const char* value(const  ::raptor::distance_adv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::raptor::distance_adv_srvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor::distance_adv_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct distance_adv_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::raptor::distance_adv_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.distance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct distance_adv_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<raptor::distance_adv_srv> {
  static const char* value() 
  {
    return "d8c624346e7957f0fb7d529b8a231ec2";
  }

  static const char* value(const raptor::distance_adv_srv&) { return value(); } 
};

template<>
struct DataType<raptor::distance_adv_srv> {
  static const char* value() 
  {
    return "raptor/distance_adv_srv";
  }

  static const char* value(const raptor::distance_adv_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor::distance_adv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8c624346e7957f0fb7d529b8a231ec2";
  }

  static const char* value(const raptor::distance_adv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor::distance_adv_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor/distance_adv_srv";
  }

  static const char* value(const raptor::distance_adv_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<raptor::distance_adv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8c624346e7957f0fb7d529b8a231ec2";
  }

  static const char* value(const raptor::distance_adv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<raptor::distance_adv_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "raptor/distance_adv_srv";
  }

  static const char* value(const raptor::distance_adv_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RAPTOR_SERVICE_DISTANCE_ADV_SRV_H

